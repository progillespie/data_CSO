vindx <-  rawdata[svec:evec]
vindx <-  rawdata[svec:evec, OPEN]
vindx <-  rawdata[svec:evec, "OPEN"]
ranges <- paste0(svec, evec, sep=":")
viewData(ranges)
ranges <- paste0(svec, sep=":", evec)
viewData(ranges)
data <- data.table(rawdata)
data
data <- data.table(rawdata, ranges)
vindx <-  data[,paste0("table", OPEN) <- data.table(.SD),by=ranges]
vindx <-  data[ranges,paste0("table", OPEN) <- data.table(.SD),by=ranges]
setkey(data, OPEN)
vindx <-  data[ranges,paste0("table", OPEN) <- data.table(.SD),by=ranges]
ranges <- data.table(paste0(svec, sep=":", evec))
viewData(ranges)
ranges <- data.table(ranges=paste0(svec, sep=":", evec))
viewData(ranges)
ranges <- data.table(paste0(svec, sep=":", evec))
viewData(ranges)
ranges[ranges,paste0("table",ranges,sep="")]
ranges[ranges,paste0("table",a,sep="")]
ranges[ranges,paste0("table","a",sep="")]
setkey(ranges, V1)
ranges[V1,paste0("table","a",sep="")]
ranges[,paste0("table","a",sep=""), by=V1]
ranges[,paste0("table", V1,sep=""), by=V1]
ranges[,paste0("table", i,sep=""), by=V1]
ranges[,paste0("table", .I,sep=""), by=V1]
ranges[,paste0("table", V1,sep="") <- data[V1,.SD], by=V1]
?data.table
ranges[,data[V1,index := .I], by=V1]
data[,length(index)]
data[,length(OPEN)]
data[,length(index)]
ranges[,data[V1,index := V1], by=V1]
data[,length(index)]
data[index]
data[,index]
data[,OPEN]
data[,summary(OPEN)]
data[,length(OPEN)]
ranges[,data[V1,IDX := ranges$V1], by=V1]
data[,length(IDX)]
data[,IDX := .BY], by=ranges$V1]
data[,IDX := .BY, by=ranges$V1]
data[ranges$V1,IDX := .BY, by=ranges$V1]
data[,length(IDX)]
data[ranges$V1,IDX := .BY, by=ranges$V1, with=F]
data[ranges$V1, IDX := .BY, by=ranges$V1, with=F]
data[ranges$V1, IDX := .BY, by=ranges$V1]
data[1:39, IDX := .BY, by=ranges$V1]
data[.BY, IDX := .BY, by=ranges$V1]
data[, IDX := .BY, by=ranges$V1]
data[, IDX := .I, by=ranges$V1]
ranges[,data[V1,IDX := .I], by=V1]
data[,length(IDX)]
ranges[,data$IDX <- .I], by=V1]
ranges[,data$IDX <- .I, by=V1]
ranges[1:39,data[V1, with=F], by=V1]
ranges[1:39,data[V1], by=V1]
ranges[1,data[V1], by=V1]
ranges <- data.table(paste0(svec, sep=":", evec))
viewData(ranges)
ranges[1,data[V1], by=V1]
ranges[1,data[V1, .SD], by=V1]
ranges[1,data[V1, .SD, with=F], by=V1]
ranges[1,data[ranges$V1, .SD, with=F], by=V1]
ranges[1,data[ranges$V1, .SD], by=V1]
viewData(rawdata)
viewData(rawdata[1:39,.SD])
viewData(rawdata[1:39,.SD, with=F])
viewData(rawdata[1:39,.SD])
viewData(rawdata[1:39,list(.SD)])
viewData(rawdata[1:39])
viewData(rawdata[1:39,])
ranges[1,data[ranges$V1,], by=V1]
ranges[1,data[V1,], by=V1]
ranges[1,data[ranges$V1,], by=V1]
ranges[1,data[1:39,], by=V1]
data <- data.table(rawdata)
ranges[1,data[1:39,], by=V1]
ranges[1,data[ranges$V1,], by=V1]
ranges[1,data[ranges$V1,,with=F], by=V1]
ranges[1,data[V1,,with=F], by=V1]
ranges[1,data[V1,], by=V1]
data[,n := 1:length(OPEN)]
setkey(data, n)
viewData(data)
ranges[1,data[V1,], by=V1]
ranges[1,data[ranges$V1,], by=V1]
ranges[1,data[ranges$V1,.SD], by=V1]
ranges[1,data[ranges$V1,list(.SD)], by=V1]
ranges[1,data[V1,list(.SD)], by=V1]
ranges[1,data[1:39,list(.SD)], by=V1]
ranges[1,data[1:39,]]
ranges[1,data["ranges$V1",],by=V1]
ranges[1,data[ranges$V1,],by=V1]
ranges[1,data[as.numeric(ranges$V1),],by=V1]
ranges[1,data[ranges[,V1],],by=V1]
ranges[1,data[ranges[V1],],by=V1]
ranges[V1]
ranges[,V1]
as.numeric(ranges[,V1])
ranges <- data.table(n=1:length(svec), svec, evec))
ranges <- data.table(n=1:length(svec), svec, evec)
viewData(ranges)
ranges[,data[svec:evec,],by=n]
ranges[1:100,data[svec:evec,],by=n]
viewData(ranges[1:100,data[svec:evec,],by=n])
ranges[,data[svec:evec,IDX := .I],by=n]
data[,length(IDX)]
viewData(data)
data <- data.table(rawdata)
data[,N := 1:length(OPEN)]
setkey(data, N)
ranges[,data[svec:evec,IDX := n],by=n]
data[,length(IDX)]
viewData(data)
viewData(data[,list(N, IDX)])
data[,summary(IDX)]
viewData(data)
data[,summary(SETT), by=IDX]
data[,summary(SETT)]
evec <- grep("EST.VOL", rawdata$OPEN) - 1
svec <- c(2, evec+4)[1:133]
length(evec)
length(svec)
svec<evec
??econometrics
install.packages("AER")
help(Startup)
dir("C:\Program Files\")
dir("C:/Program Files/")
dir("C:/system32/")
dir("C:/Program Files/R/")
dir("C:/Program Files/R/R-2.15.2")
dir("C:/Program Files/R/R-2.15.2/library/")
??Path
??Environment
lib.Path()
dir("C:/Program Files/R/R-2.15.2/etc/")
dir("C:/Program Files/R/R-2.15.2/etc/Rprofile.site")
View("C:/Program Files/R/R-2.15.2/etc/Rprofile.site")
.libPaths("D:/programs/R/R-2.15.2/library/")
library("ctv")
library("data.tables")
.libPaths(.Library)
.libPaths(".Library")
.libPaths()
.libPaths("D:/programs/R/R-2.15.2/library")
getwd()
.libPath()
.libPaths()
library("data.tables")
library("data.table")
library("ctv")
library("AER")
install.packages("AER")
library("AER")
data()
help("data")
help(Greene2003)
data(Greene2003)
data("Greene2003")
help("USPersonalExpenditure")
data("USPersonalExpenditure")
USEx <- USPersonalExpenditure
rm("USPersonalExpenditure")
View(USEx)
viewData(USEx)
rm(USEx)
data("CigarettesSW")
viewData(CigarettesSW)
library("plm")
install.packages("plm")
library("plm")
help("plm")
plm(price ~ packs + tax + income, CigarettesSW, model=c("within"))
pricemodel <- plm(price ~ packs + tax + income, CigarettesSW, model=c("within"))
summary(pricemodel)
qqplot(pricemodel)
help(qqplot)
pricemodel.res <- resid(pricemodel)
?fitted()
pricemodel.xb <- fitted(pricemodel)
plot(pricemodel.xb, pricmodel.res)
plot(pricmodel.res)
plot(pricmodel.res)
ls(pricemodel.res)
ls("pricemodel.res")
ls()
plot(pricemodel.res)
plot(pricemodel.res, pricemodel.xb)
plot(pricemodel.res, pricemodel.xb)
pricemodel.xb <- predict(pricemodel)
?predict
?plm
pricemodel.xb <- fitted.values(pricemodel)
View(pricemodel.xb)
pricemodel.xb <- fitted(pricemodel)
View(pricemodel.xb)
viewData(pricemodel.xb)
?lmtest
install.packages("lmtest")
??lmtest
??kstest
help("ks.test")
help("fitted")
plot(pricemodel.xb, pricemodel.res)
qqplot(pricemodel)
summary(pricemodel)
qqPlot(pricemodel)
spreadLevelPlot(pricemodel)
fit <- lm(price ~ packs + tax + income, data=CigarettesSW)
spreadLevelPlot(fit)
qqPlot(fit)
ncvTest(fit)
vif(fit)
aqrt(vif(fit))
aqrt(vif(fit))>2
sqrt(vif(fit))>2
crPlot(fit)
crPlots(fit)
ceresPlots(fit)
durbinWatsonTest(fit)
library(gvlma)
install.packages("gvlma")
library(gvlma)
gvmodel <- gvmla(fit)
gvmodel <- gvlma(fit)
summary(gvlma)
summary(gvmodel)
fit <- lm(log(price) ~ log(packs) + log(tax) + log(income), data=CigarettesSW)
gvmodel <- gvlma(fit)
summary(gvmodel)
res <- studres(fit)
hist(res, freq=F)
xfit <- seq(min(res), max(res),length(96))
yfit <- dnorm(xfit)
lines(xfit,yfit)
hist(res, freq=F)
xfit <- seq(min(res), max(res),length(96))
yfit <- dnorm(xfit)
lines(xfit,yfit)
qqPlot(fit)
spreadLevelPlot(fit)
help(spreadLevelPlot)
help(gvlma)
rm(list=ls())
data <- data(CigarettesSW)
rm(CigarettesSW)
rm(list=ls())
data <- pdata.frame(data(CigarettesSW), index=c(state,year))
ols <- lm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW)
summary(ols)
lsdv <- lm(log(packs)~log(price) + log(tax) + log(income) + factor(state), data=CigarettesSW)
summary(lsdv)
lsdv.xb <- fitted(lsdv)
scatterplot(lsdv.xb ~ CigarettesSW$income|CigarettesSW$state)
pftest(lsdv, ols)
pfTest(lsdv, ols)
pFtest(lsdv, ols)
fixed <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW, index=c(state,year), model="within")
fixed <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW, model="within")
summary(fixed)
str(CigarettesSW$year)
fixef(fixed)
pFtest(fixed,ols)
random <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW, model="random")
phtest(fixed, random)
fixed.time <- plm(log(packs)~log(price) + log(tax) + log(income) + factor(year), data=CigarettesSW, model="within")
summary(fixed)
summary(fixed.time)
pFtest(fixed.time, fixed)
plmtest(fixed.time, fixed)
plmtest(fixed, c("time"), type="bp")
plmtest(fixed, c("year"), type="bp")
help(plmtest)
plmtest(fixed.time, c("time"), type="bp")
plmtest(fixed.time, c("two-ways"), type="bp")
plmtest(fixed.time, c("twoways"), type="bp")
plmtest(fixed.time, c("twoway"), type="bp")
plmtest(fixed.time, c("individual"), type="bp")
random <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW, effects=c("time"),model="random")
random.time <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW, effects=c("time"),model="random")
random <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW,model="random")
summary(random)
summary(random.time)
plmtest(random, c("time"), type="bp")
random.time <- plm(log(packs)~log(price) + log(tax) + log(income)+factor(year), data=CigarettesSW,model="random")
pFtest(random.time, random)
pooledOLS <- plm(log(packs)~log(price) + log(tax) + log(income), data=CigarettesSW,model="pooling")
summary(pooledOLS)
summary(random)
plmtest(pooledOLS, type=c("bp"))
pcdtest(fixed, test = c("lm"))
pcdtest(fixed, test = c("cd"))
pbgtest(fixed)
Panel.set <- plm.data(CigarettesSW, index = c("state", "year"))
library(tseries)
install.packages("tseries")
library(tseries)
adf.test(Panel.set$packs, k=2)
adf.test(Panel.set$packs, k=1)
bptest(log(packs) ~ log(price) + log(tax) + log(income) + factor(state), data = CigarettesSW,studentize=F)
q()
library(data.table)
library(ctv)
help("ctv")
??ctv
.libPath()
.lib.Path()
??libPath
help("library")
.libPaths()
install.packages("ctv")
install.views("econometrics")
help(ctv)
help("ctv")
help(install.views)
available.views()
install.views("Econometrics")
q()
dirstruct("D:/Data")
.libPaths()
dirstruct("D:/Data")
dirstruct <- function(datadir, ...){
#source("directory.struct.R")
# These two directories always reside in data_NFSPanelAnalysis project directory, no matter
# which project you're working on. Will always look for data_NFSPanelAnalysis one directory above paneldir
nfsdir <- paste(datadir, "data_NFSPanelAnalysis/", sep='')
nfsorigdata <- paste(nfsdir, "OrigData/", sep='')
nfsoutdata <- paste(nfsdir, "OutData/", sep='')
regional.outdatadir <- paste(nfsoutdata, "RegionalAnalysis/", sep='')
# FADN panel directories
fadndir <- paste(datadir, "data_FADNPanelAnalysis/", sep='')
fadnorigdata <- paste(fadndir, "OrigData/", sep='')
fadnoutdata <- paste(fadndir, "OutData/", sep='')
fadn9907dir <- paste(fadnorigdata, "FADN_1/csv/", sep='')
#fadn9907dir <- paste(fadnorigdata, "eupanel9907/csv/", sep='')
fadn0407dir <- paste(fadnorigdata, "eupanel0407/csv/", sep='')
fadn2dir <- paste(fadnorigdata, "FADN_2/TEAGSC/", sep='')
}
dirstruct("D:/Data")
datadir <- "D:/Data"
dirstruct(datadir)
dirstruct <- function(datadir, ...){
#source("directory.struct.R")
# These two directories always reside in data_NFSPanelAnalysis project directory, no matter
# which project you're working on. Will always look for data_NFSPanelAnalysis one directory above paneldir
nfsdir <- paste(datadir, "data_NFSPanelAnalysis/", sep='')
nfsorigdata <- paste(nfsdir, "OrigData/", sep='')
nfsoutdata <- paste(nfsdir, "OutData/", sep='')
regional.outdatadir <- paste(nfsoutdata, "RegionalAnalysis/", sep='')
# FADN panel directories
fadndir <- paste(datadir, "data_FADNPanelAnalysis/", sep='')
fadnorigdata <- paste(fadndir, "OrigData/", sep='')
fadnoutdata <- paste(fadndir, "OutData/", sep='')
fadn9907dir <- paste(fadnorigdata, "FADN_1/csv/", sep='')
#fadn9907dir <- paste(fadnorigdata, "eupanel9907/csv/", sep='')
fadn0407dir <- paste(fadnorigdata, "eupanel0407/csv/", sep='')
fadn2dir <- paste(fadnorigdata, "FADN_2/TEAGSC/", sep='')
return(fadndir)
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
#source("directory.struct.R")
# These two directories always reside in data_NFSPanelAnalysis project directory, no matter
# which project you're working on. Will always look for data_NFSPanelAnalysis one directory above paneldir
nfsdir <- paste(datadir, "data_NFSPanelAnalysis/", sep='')
nfsorigdata <- paste(nfsdir, "OrigData/", sep='')
nfsoutdata <- paste(nfsdir, "OutData/", sep='')
regional.outdatadir <- paste(nfsoutdata, "RegionalAnalysis/", sep='')
# FADN panel directories
fadndir <- paste(datadir, "data_FADNPanelAnalysis/", sep='')
fadnorigdata <- paste(fadndir, "OrigData/", sep='')
fadnoutdata <- paste(fadndir, "OutData/", sep='')
fadn9907dir <- paste(fadnorigdata, "FADN_1/csv/", sep='')
#fadn9907dir <- paste(fadnorigdata, "eupanel9907/csv/", sep='')
fadn0407dir <- paste(fadnorigdata, "eupanel0407/csv/", sep='')
fadn2dir <- paste(fadnorigdata, "FADN_2/TEAGSC/", sep='')
return(fadndir=fadndir)
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
source("directory.struct.R")
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
source("a_handydo/directory.struct.R")
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
source("./a_handydo/directory.struct.R")
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
source("D:/Data/a_handydo/directory.struct.R")
}
dirstruct <- function(datadir, ...){
dirstruct <- function(datadir, ...){}
}
)
dirstruct(datadir)
<
dirstruct <- function(datadir, ...){
source("D:/Data/a_handydo/directory.struct.R")
}
dirstruct(datadir)
dirstruct <- function(datadir, ...){
source("D:/a_handydo/directory.struct.R")
}
dirstruct(datadir)
datadir <- "D:/Data"
dirstruct(datadir)
getwd()
datadir <- "D:/Data"
dirstruct(datadir)
dirstruct("D:/Data")
datadir <- "D:/Data"
dirstruct(datadir)
rm(list=ls())
datadir <- "D:/Data"
dirstruct(datadir)
rm(list=ls())
source(.Rprofile)
rm(list=ls())
source(".Rprofile")
datadir <- "D:/Data"
dirstruct(datadir)
fadn <- data.table(read.csv(paste(fadn9907dir, "Ireland.csv", sep='')))
rm(list=ls())
source(".Rprofile")
rm(list=ls())
source(".Rprofile")
datadir <- "D:/Data"
dirstruct(datadir)
fadn <- data.table(read.csv(paste(fadn9907dir, "Ireland.csv", sep='')))
rm(list=ls())
source(".Rprofile")
datadir <- "D:/Data"
dirstruct(datadir)
fadn <- data.table(read.csv(paste(fadn9907dir, "Ireland.csv", sep='')))
library("data.table")
rm(list=ls())
source(".Rprofile")
datadir <- "D:/Data"
dirstruct(datadir)
rm(list=ls())
source(".Rprofile")
datadir <- "D:/Data"
dirstruct(datadir)
#library("data.table")
fadn <- data.table(read.csv(paste(fadn9907dir, "Ireland.csv", sep='')))
install.packages("datamart")
install.packages("D:\\datamart_0.4.2.tar.gz", repos = NULL, type="source")
library("datamart")
install.packages("smarterpoland")
install.packages("D:\\datamart_0.4.2.tar.gz", repos = NULL, type="source")
install.packages("datamart")
install.packages("D:\\datamart_0.4.2.tar.gz", repos = NULL, type="source")
install.packages("installr")
Vectorize
source('D:/Data/data_CSO/code_R/CSO_data_import.R', echo=TRUE)
try(dir.create(data.folder, showWarnings=F,recursive=T),silent=T)
dir.create(data.folder, showWarnings=F,recursive=T),silent=T)
dir.create(data.folder, showWarnings=F,recursive=T)
dir.create(data.folder,recursive=T)
source('D:/Data/data_CSO/code_R/CSO_data_import.R', echo=TRUE)
#---------------------------------------------------------------------
# Download data from CSO
# Uses function written specifically to download CSO.ie datasets
#
#  function is: getCSO(cso.rss.link)
#    where cso.rss.link is the .xml link you get by clicking the "RSS"
#         at the top of the StatBank page after selecting your sector
#         and theme on the left banner. Copy and paste the address.
#
# e.g. Try feeding the following into the function
# "http://www.cso.ie/px/pxeirestat/Database/eirestat/Livestock%20and%20Farm%20Numbers/RSSLivestock%20and%20Farm%20Numbers.xml"
#---------------------------------------------------------------------
# Record start location, then move to directory containing scripts
startdir <- getwd()
scriptdir <- "D://Data//data_CSO//code_R/"
setwd(scriptdir)
# Make sure the functions are defined
source("functions//convertpxR.R")
source("functions//getCSO.R")
#---------------------------------------------------------------------
# Now define args and call getCSO for each RSS link you want
#  Note: Each RSS link will have multiple series(datasets) each of
#        which will be downloaded and saved.
#---------------------------------------------------------------------
# root of data.folder's filepath, ensure it exists
origdata <- "D://Data/data_CSO/OrigData/"
setwd(origdata)
try(dir.create(BusinessSectors, showWarnings=F),silent=T)
try(dir.create(BusinessSectors/AgricultureandFishing, showWarnings=F),silent=T)
origdata <- "D://Data/data_CSO/OrigData/BusinessSectors/AgricultureandFishing/"
setwd(scriptdir) # go back to script directory
origdata <- "D://Data/data_CSO/OrigData/"
setwd(origdata)
try(dir.create(BusinessSectors, showWarnings=F),silent=T)
dir.create(BusinessSectors)
origdata <- "D://Data/data_CSO/OrigData/"
setwd(origdata)
try(dir.create("BusinessSectors", showWarnings=F),silent=T)
try(dir.create("BusinessSectors/AgricultureandFishing", showWarnings=F),silent=T)
origdata <- "D://Data/data_CSO/OrigData/BusinessSectors/AgricultureandFishing/"
setwd(scriptdir) # go back to script directory
source('D:/Data/data_CSO/code_R/CSO_data_import.R', echo=TRUE)
